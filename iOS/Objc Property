## retain : 
* setter를 생성할 때, 전달된 인자를 retain하여 해당 객체의 라이프 타임동안 이 값이 유지될 수 있도록 한다. (객체가 속성값을 소유하는 개념이다. strong을 참고)
## assign : 
* setter에서 인스턴스 변수에 인자값을 그냥 대입한다. 인자가 객체인 경우 객체가 살아있는 동안에 값이 파괴될 수도 있다. (weak 를 참고)
## readwrite :
* 디폴트로 설정되는 값. setter와 getter를 함께 만든다.
## readonly : 
* getter만 만든다. 즉 객체외부에서는 이 프로퍼티를 변경할 수 없다.
## atomic : 
* 디폴트. atomic으로 설정된 프로퍼티는 변경 시에 해당 변수를 lock하여 다른 스레드로부터 보호한다.
## nonatomic : 
* 다른 스레드에서의 동시 접근에 대해 막지 않는다. 대부분의 경우 성능을 이유로 명시하여 만든다.
## gettter= : 
* getter의 메소드 명은 프로퍼티 이름과 동일하게 만들어지는데, getter 메소드 이름을 바꾼다. 하지만 외부에서는 프로퍼티 이름으로 접근할 수 있다.
## setter= : 
* setter의 메소드명은 기본적으로 프로퍼티 이름 앞에 set을 붙이고 프로퍼티 명의 첫글자를 대문자로 바꾼다. 이 규칙을 사용하지 않고 별도의 setter 메소드 명을 사용할 때 쓴다.
## strong : 
* iOS4부터 도입된 ARC 환경에서는 객체에 대한 strong reference가 하나도 없는 경우 객체가 자동으로 파괴되는데, 해당 프로퍼티는 세팅시에 strong reference를 갖도록 한다. retain과 유사하다.
## weak : 
* 인스턴스 변수가 __weak 속성으로 선언된다. 해당 변수가 가리키는 객체에 대해 strong reference를 유지하지 않는다. assign과 비슷한데, 대신 가리키던 객체가 해제되어 버리면 자동으로 nil로 바뀌기 때문에 잘못된 메모리 참조에 의한 앱 크래시를 방지할 수 있다.
## copy : 
* setter에서 값을 복사해서 세팅한다. 원본 객체가 중간에 변경되어도 인스턴스 변수에 대입된 값은 영향을 받지 않는다. 주로 문자열 프로퍼티에 적용한다.
